
Property changes on: Artem.GoogleMap
___________________________________________________________________
Added: svn:ignore
   + bin
obj


Index: Artem.GoogleMap/Artem.GoogleMap.csproj
===================================================================
--- Artem.GoogleMap/Artem.GoogleMap.csproj	(revision 67130)
+++ Artem.GoogleMap/Artem.GoogleMap.csproj	(working copy)
@@ -176,6 +176,12 @@
     <EmbeddedResource Include="Scripts\MicrosoftAjax.debug.js" />
     <EmbeddedResource Include="Scripts\MicrosoftAjax.js" />
   </ItemGroup>
+  <ItemGroup>
+    <EmbeddedResource Include="Scripts\markerclusterer.js" />
+    <EmbeddedResource Include="Scripts\markerclusterer_packed.js">
+		<DependentUpon>markerclusterer.js</DependentUpon>
+	</EmbeddedResource>
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
@@ -189,4 +195,7 @@
       <UserProperties BuildVersion_UseGlobalSettings="True" BuildVersion_UpdateFileVersion="False" />
     </VisualStudio>
   </ProjectExtensions>
+  <PropertyGroup>
+    <PostBuildEvent>xcopy /s /y "$(TargetDir)*.*" "$(SolutionDir)..\..\Output"</PostBuildEvent>
+  </PropertyGroup>
 </Project>
\ No newline at end of file
Index: Artem.GoogleMap/Properties/AssemblyInfo.cs
===================================================================
--- Artem.GoogleMap/Properties/AssemblyInfo.cs	(revision 67130)
+++ Artem.GoogleMap/Properties/AssemblyInfo.cs	(working copy)
@@ -33,3 +33,7 @@
 
 [assembly: WebResource("Artem.Google.Scripts.MicrosoftAjax.js", "text/javascript")]
 [assembly: WebResource("Artem.Google.Scripts.MicrosoftAjax.debug.js", "text/javascript")]
+
+[assembly: WebResource("Artem.Google.Scripts.markerclusterer.js", "text/javascript")]
+[assembly: WebResource("Artem.Google.Scripts.markerclusterer_packed.js", "text/javascript")]
+
Index: Artem.GoogleMap/Scripts/ArtemGoogle.js
===================================================================
--- Artem.GoogleMap/Scripts/ArtemGoogle.js	(revision 67130)
+++ Artem.GoogleMap/Scripts/ArtemGoogle.js	(working copy)
@@ -80,6 +80,10 @@
     this.get_markerManager = function () { return markerManager; };
     this.set_markerManager = function (value) { markerManager = value; }
 
+    var markerClusterer = null;
+    this.get_markerClusterer = function () { return markerClusterer; };
+    this.set_markerClusterer = function (value) { markerClusterer = value; }
+
     var name = null;
     this.get_name = function () { return name; };
     this.set_name = function (value) { name = value; };
@@ -142,6 +146,7 @@
     EnableGoogleBar: null,
     EnableInfoWindow: null,
     EnableMarkerManager: null,
+    EnableMarkerClusterer: null,
     EnableReverseGeocoding: null,
     EnableScrollWheelZoom: null,
     EnterpriseKey: null,
@@ -168,6 +173,7 @@
     Markers: [],
     Polygons: [],
     Polylines: [],
+    KmlUrl: null,
 
     //    // BEGIN OBSOLETE
     //    // events
@@ -198,6 +204,8 @@
     get_markerEvents: null,
     get_markerManager: null,
     set_markerManager: null,
+    get_markerClusterer: null,
+    set_markerClusterer: null,
     get_name: null,
     set_name: null,
     get_partialUpdateDelegate: null,
@@ -745,6 +753,7 @@
         delete this.get_mapEvents;
         delete this.get_mapPano;
         delete this.get_markerManager;
+        delete this.get_markerClusterer;
         delete this.get_name;
         delete this.get_partialUpdateDelegate;
         delete this.get_polygonEvents;
@@ -774,6 +783,7 @@
         delete this.EnableGoogleBar;
         delete this.EnableInfoWindow;
         delete this.EnableMarkerManager;
+        delete this.EnableMarkerClusterer;
         delete this.EnableReverseGeocoding;
         delete this.EnableScrollWheelZoom;
         delete this.EnterpriseKey;
@@ -801,6 +811,7 @@
         delete this.Width;
         delete this.Zoom;
         delete this.ZoomPanType;
+        delete this.KmlUrl;
         //#endregion
 
         Artem.Google.Map.callBaseMethod(this, 'dispose');
@@ -829,6 +840,7 @@
             this.EnableGoogleBar = state.EnableGoogleBar;
             this.EnableInfoWindow = state.EnableInfoWindow;
             this.EnableMarkerManager = state.EnableMarkerManager;
+            this.EnableMarkerClusterer = state.EnableMarkerClusterer;
             this.EnableReverseGeocoding = state.EnableReverseGeocoding;
             this.EnableScrollWheelZoom = state.EnableScrollWheelZoom;
             this.EnterpriseKey = state.EnterpriseKey;
@@ -849,6 +861,7 @@
             this.Width = state.Width;
             this.Zoom = state.Zoom;
             this.ZoomPanType = state.ZoomPanType;
+            this.KmlUrl = state.KmlUrl;
 
             //        // events
             //        if (config.MapEvents) {
@@ -1215,6 +1228,18 @@
         // enable marker manager
         if (this.EnableMarkerManager)
             this.set_markerManager(new MarkerManager(map, this.MarkerManagerOptions));
+
+        // enable marker clusterer
+        if (this.EnableMarkerClusterer) {
+            var mcOptions = { gridSize: 50, maxZoom: 15 };
+            this.set_markerClusterer(new MarkerClusterer(map, [], mcOptions));
+        }
+
+        if (this.KmlUrl) {
+            var geoXml = new GGeoXml(this.KmlUrl);
+            map.addOverlay(geoXml);
+        }
+
         // map view
         this.setMapView();
         // street view
@@ -1295,6 +1320,18 @@
                 }
             }
         }
+
+        if (this.EnableMarkerClusterer) {
+            var gs = [];
+
+            for (var i = 0; i < this.Markers.length; i++)
+                gs.push(this.Markers[i].get_marker());
+
+            var mcOptions = { gridSize: 50, maxZoom: 15 };
+
+            this.get_markerClusterer().addMarkers(gs);
+            this.get_markerClusterer().resetViewport();
+        }
         //        // fire actions
         //        if (this.Actions) {
         //            for (var i = 0; i < this.Actions.length; i++) {
@@ -1633,7 +1670,12 @@
     this.ShadowUrl = state.ShadowUrl;
     this.Text = state.Text;
     this.Title = state.Title;
+    this.KmlUrl = state.KmlUrl;
 
+    this.Managed = false;
+    if (map.EnableMarkerClusterer || map.EnableMarkerManager)
+        this.Managed = true;
+
     this.get_map = function () { return map; };
 
     // render or resolve address agains geocoding
@@ -1666,6 +1708,8 @@
     ShadowUrl: null,
     Text: null,
     Title: null,
+    GoogleMarker: null,
+    Managed: null,
 
     //#endregion
 
@@ -1703,6 +1747,7 @@
         this.get_map.removeOverlay(this.get_marker());
     },
 
+
     render: function Artem_Google_Marker$render(point) {
 
         if (!point) point = new GLatLng(this.Latitude, this.Longitude);
@@ -1719,7 +1764,9 @@
         // create
         var marker = new GMarker(point, options);
         this.get_marker = function () { return marker; };
-        this.get_map().addOverlay(marker);
+        
+        if (!this.Managed)
+            this.get_map().addOverlay(marker);
     },
 
     resolve: function Artem_Google_Marker$resolve() {
@@ -2389,6 +2436,7 @@
     this.EnableGoogleBar = gmap.EnableGoogleBar;
     this.EnableInfoWindow = gmap.EnableInfoWindow;
     this.EnableMarkerManager = gmap.EnableMarkerManager;
+    this.EnableMarkerClusterer = gmap.EnableMarkerClusterer;
     this.EnableReverseGeocoding = gmap.EnableReverseGeocoding;
     this.EnableScrollWheelZoom = gmap.EnableScrollWheelZoom;
     this.EnterpriseKey = gmap.EnterpriseKey;
@@ -2409,6 +2457,7 @@
     this.Width = gmap.Width;
     this.Zoom = gmap.Zoom;
     this.ZoomPanType = gmap.ZoomPanType;
+    this.KmlUrl = gmap.KmlUrl;
 }
 Artem.Google.State.prototype = {
     Address: null,
@@ -2423,6 +2472,7 @@
     EnableGoogleBar: null,
     EnableInfoWindow: null,
     EnableMarkerManager: null,
+    EnableMarkerClusterer: null,
     EnableReverseGeocoding: null,
     EnableScrollWheelZoom: null,
     EnterpriseKey: null,
@@ -2442,7 +2492,8 @@
     StreetViewPanoID: null,
     Width: null,
     Zoom: null,
-    ZoomPanType: null
+    ZoomPanType: null,
+    KmlUrl: null,
 }
 Artem.Google.State.registerClass("Artem.Google.State");
 //#endregion
Index: Artem.GoogleMap/Scripts/markerclusterer.js
===================================================================
--- Artem.GoogleMap/Scripts/markerclusterer.js	(revision 0)
+++ Artem.GoogleMap/Scripts/markerclusterer.js	(revision 0)
@@ -0,0 +1,735 @@
+ï»¿/**
+* @name MarkerClusterer
+* @version 1.0
+* @author Xiaoxi Wu
+* @copyright (c) 2009 Xiaoxi Wu
+* @fileoverview
+* This javascript library creates and manages per-zoom-level 
+* clusters for large amounts of markers (hundreds or thousands).
+* This library was inspired by the <a href="http://www.maptimize.com">
+* Maptimize</a> hosted clustering solution.
+* <br /><br/>
+* <b>How it works</b>:<br/>
+* The <code>MarkerClusterer</code> will group markers into clusters according to
+* their distance from a cluster's center. When a marker is added,
+* the marker cluster will find a position in all the clusters, and 
+* if it fails to find one, it will create a new cluster with the marker.
+* The number of markers in a cluster will be displayed
+* on the cluster marker. When the map viewport changes,
+* <code>MarkerClusterer</code> will destroy the clusters in the viewport 
+* and regroup them into new clusters.
+*
+*/
+
+/*
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+
+/**
+* @name MarkerClustererOptions
+* @class This class represents optional arguments to the {@link MarkerClusterer}
+* constructor.
+* @property {Number} [maxZoom] The max zoom level monitored by a
+* marker cluster. If not given, the marker cluster assumes the maximum map
+* zoom level. When maxZoom is reached or exceeded all markers will be shown
+* without cluster.
+* @property {Number} [gridSize=60] The grid size of a cluster in pixel. Each
+* cluster will be a square. If you want the algorithm to run faster, you can set
+* this value larger.
+* @property {Array of MarkerStyleOptions} [styles]
+* Custom styles for the cluster markers.
+* The array should be ordered according to increasing cluster size,
+* with the style for the smallest clusters first, and the style for the
+* largest clusters last.
+*/
+
+/**
+* @name MarkerStyleOptions
+* @class An array of these is passed into the {@link MarkerClustererOptions}
+* styles option.
+* @property {String} [url] Image url.
+* @property {Number} [height] Image height.
+* @property {Number} [height] Image width.
+* @property {Array of Number} [opt_anchor] Anchor for label text, like [24, 12]. 
+*    If not set, the text will align center and middle.
+* @property {String} [opt_textColor="black"] Text color.
+*/
+
+/**
+* Creates a new MarkerClusterer to cluster markers on the map.
+*
+* @constructor
+* @param {GMap2} map The map that the markers should be added to.
+* @param {Array of GMarker} opt_markers Initial set of markers to be clustered.
+* @param {MarkerClustererOptions} opt_opts A container for optional arguments.
+*/
+function MarkerClusterer(map, opt_markers, opt_opts) {
+    // private members
+    var clusters_ = [];
+    var map_ = map;
+    var maxZoom_ = null;
+    var me_ = this;
+    var gridSize_ = 60;
+    var sizes = [53, 56, 66, 78, 90];
+    var styles_ = [];
+    var leftMarkers_ = [];
+    var mcfn_ = null;
+
+    var i = 0;
+    for (i = 1; i <= 5; ++i) {
+        styles_.push({
+            'url': "http://gmaps-utility-library.googlecode.com/svn/trunk/markerclusterer/images/m" + i + ".png",
+            'height': sizes[i - 1],
+            'width': sizes[i - 1]
+        });
+    }
+
+    if (typeof opt_opts === "object" && opt_opts !== null) {
+        if (typeof opt_opts.gridSize === "number" && opt_opts.gridSize > 0) {
+            gridSize_ = opt_opts.gridSize;
+        }
+        if (typeof opt_opts.maxZoom === "number") {
+            maxZoom_ = opt_opts.maxZoom;
+        }
+        if (typeof opt_opts.styles === "object" && opt_opts.styles !== null && opt_opts.styles.length !== 0) {
+            styles_ = opt_opts.styles;
+        }
+    }
+
+    /**
+    * When we add a marker, the marker may not in the viewport of map, then we don't deal with it, instead
+    * we add the marker into a array called leftMarkers_. When we reset MarkerClusterer we should add the
+    * leftMarkers_ into MarkerClusterer.
+    */
+    function addLeftMarkers_() {
+        if (leftMarkers_.length === 0) {
+            return;
+        }
+        var leftMarkers = [];
+        for (i = 0; i < leftMarkers_.length; ++i) {
+            me_.addMarker(leftMarkers_[i], true, null, null, true);
+        }
+        leftMarkers_ = leftMarkers;
+    }
+
+    /**
+    * Get cluster marker images of this marker cluster. Mostly used by {@link Cluster}
+    * @private
+    * @return {Array of String}
+    */
+    this.getStyles_ = function () {
+        return styles_;
+    };
+
+    /**
+    * Remove all markers from MarkerClusterer.
+    */
+    this.clearMarkers = function () {
+        for (var i = 0; i < clusters_.length; ++i) {
+            if (typeof clusters_[i] !== "undefined" && clusters_[i] !== null) {
+                clusters_[i].clearMarkers();
+            }
+        }
+        clusters_ = [];
+        leftMarkers_ = [];
+        GEvent.removeListener(mcfn_);
+    };
+
+    /**
+    * Check a marker, whether it is in current map viewport.
+    * @private
+    * @return {Boolean} if it is in current map viewport
+    */
+    function isMarkerInViewport_(marker) {
+        return map_.getBounds().containsLatLng(marker.getLatLng());
+    }
+
+    /**
+    * When reset MarkerClusterer, there will be some markers get out of its cluster.
+    * These markers should be add to new clusters.
+    * @param {Array of GMarker} markers Markers to add.
+    */
+    function reAddMarkers_(markers) {
+        var len = markers.length;
+        var clusters = [];
+        for (var i = len - 1; i >= 0; --i) {
+            me_.addMarker(markers[i].marker, true, markers[i].isAdded, clusters, true);
+        }
+        addLeftMarkers_();
+    }
+
+    /**
+    * Add a marker.
+    * @private
+    * @param {GMarker} marker Marker you want to add
+    * @param {Boolean} opt_isNodraw Whether redraw the cluster contained the marker
+    * @param {Boolean} opt_isAdded Whether the marker is added to map. Never use it.
+    * @param {Array of Cluster} opt_clusters Provide a list of clusters, the marker
+    *     cluster will only check these cluster where the marker should join.
+    */
+    this.addMarker = function (marker, opt_isNodraw, opt_isAdded, opt_clusters, opt_isNoCheck) {
+        if (opt_isNoCheck !== true) {
+            if (!isMarkerInViewport_(marker)) {
+                leftMarkers_.push(marker);
+                return;
+            }
+        }
+
+        var isAdded = opt_isAdded;
+        var clusters = opt_clusters;
+        var pos = map_.fromLatLngToDivPixel(marker.getLatLng());
+
+        if (typeof isAdded !== "boolean") {
+            isAdded = false;
+        }
+        if (typeof clusters !== "object" || clusters === null) {
+            clusters = clusters_;
+        }
+
+        var length = clusters.length;
+        var cluster = null;
+        for (var i = length - 1; i >= 0; i--) {
+            cluster = clusters[i];
+            var center = cluster.getCenter();
+            if (center === null) {
+                continue;
+            }
+            center = map_.fromLatLngToDivPixel(center);
+
+            // Found a cluster which contains the marker.
+            if (pos.x >= center.x - gridSize_ && pos.x <= center.x + gridSize_ &&
+          pos.y >= center.y - gridSize_ && pos.y <= center.y + gridSize_) {
+                cluster.addMarker({
+                    'isAdded': isAdded,
+                    'marker': marker
+                });
+                if (!opt_isNodraw) {
+                    cluster.redraw_();
+                }
+                return;
+            }
+        }
+
+        // No cluster contain the marker, create a new cluster.
+        cluster = new Cluster(this, map);
+        cluster.addMarker({
+            'isAdded': isAdded,
+            'marker': marker
+        });
+        if (!opt_isNodraw) {
+            cluster.redraw_();
+        }
+
+        // Add this cluster both in clusters provided and clusters_
+        clusters.push(cluster);
+        if (clusters !== clusters_) {
+            clusters_.push(cluster);
+        }
+    };
+
+    /**
+    * Remove a marker.
+    *
+    * @param {GMarker} marker The marker you want to remove.
+    */
+
+    this.removeMarker = function (marker) {
+        for (var i = 0; i < clusters_.length; ++i) {
+            if (clusters_[i].remove(marker)) {
+                clusters_[i].redraw_();
+                return;
+            }
+        }
+    };
+
+    /**
+    * Redraw all clusters in viewport.
+    */
+    this.redraw_ = function () {
+        var clusters = this.getClustersInViewport_();
+        for (var i = 0; i < clusters.length; ++i) {
+            clusters[i].redraw_(true);
+        }
+    };
+
+    /**
+    * Get all clusters in viewport.
+    * @return {Array of Cluster}
+    */
+    this.getClustersInViewport_ = function () {
+        var clusters = [];
+        var curBounds = map_.getBounds();
+        for (var i = 0; i < clusters_.length; i++) {
+            if (clusters_[i].isInBounds(curBounds)) {
+                clusters.push(clusters_[i]);
+            }
+        }
+        return clusters;
+    };
+
+    /**
+    * Get max zoom level.
+    * @private
+    * @return {Number}
+    */
+    this.getMaxZoom_ = function () {
+        return maxZoom_;
+    };
+
+    /**
+    * Get map object.
+    * @private
+    * @return {GMap2}
+    */
+    this.getMap_ = function () {
+        return map_;
+    };
+
+    /**
+    * Get grid size
+    * @private
+    * @return {Number}
+    */
+    this.getGridSize_ = function () {
+        return gridSize_;
+    };
+
+    /**
+    * Get total number of markers.
+    * @return {Number}
+    */
+    this.getTotalMarkers = function () {
+        var result = 0;
+        for (var i = 0; i < clusters_.length; ++i) {
+            result += clusters_[i].getTotalMarkers();
+        }
+        return result;
+    };
+
+    /**
+    * Get total number of clusters.
+    * @return {int}
+    */
+    this.getTotalClusters = function () {
+        return clusters_.length;
+    };
+
+    /**
+    * Collect all markers of clusters in viewport and regroup them.
+    */
+    this.resetViewport = function () {
+        var clusters = this.getClustersInViewport_();
+        var tmpMarkers = [];
+        var removed = 0;
+
+        for (var i = 0; i < clusters.length; ++i) {
+            var cluster = clusters[i];
+            var oldZoom = cluster.getCurrentZoom();
+            if (oldZoom === null) {
+                continue;
+            }
+            var curZoom = map_.getZoom();
+            if (curZoom !== oldZoom) {
+
+                // If the cluster zoom level changed then destroy the cluster
+                // and collect its markers.
+                var mks = cluster.getMarkers();
+                for (var j = 0; j < mks.length; ++j) {
+                    var newMarker = {
+                        'isAdded': false,
+                        'marker': mks[j].marker
+                    };
+                    tmpMarkers.push(newMarker);
+                }
+                cluster.clearMarkers();
+                removed++;
+                for (j = 0; j < clusters_.length; ++j) {
+                    if (cluster === clusters_[j]) {
+                        clusters_.splice(j, 1);
+                    }
+                }
+            }
+        }
+
+        // Add the markers collected into marker cluster to reset
+        reAddMarkers_(tmpMarkers);
+        this.redraw_();
+    };
+
+
+    /**
+    * Add a set of markers.
+    *
+    * @param {Array of GMarker} markers The markers you want to add.
+    */
+    this.addMarkers = function (markers) {
+        for (var i = 0; i < markers.length; ++i) {
+            this.addMarker(markers[i], true);
+        }
+        this.redraw_();
+    };
+
+    // initialize
+    if (typeof opt_markers === "object" && opt_markers !== null) {
+        this.addMarkers(opt_markers);
+    }
+
+    // when map move end, regroup.
+    mcfn_ = GEvent.addListener(map_, "moveend", function () {
+        me_.resetViewport();
+    });
+}
+
+/**
+* Create a cluster to collect markers.
+* A cluster includes some markers which are in a block of area.
+* If there are more than one markers in cluster, the cluster
+* will create a {@link ClusterMarker_} and show the total number
+* of markers in cluster.
+*
+* @constructor
+* @private
+* @param {MarkerClusterer} markerClusterer The marker cluster object
+*/
+function Cluster(markerClusterer) {
+    var center_ = null;
+    var markers_ = [];
+    var markerClusterer_ = markerClusterer;
+    var map_ = markerClusterer.getMap_();
+    var clusterMarker_ = null;
+    var zoom_ = map_.getZoom();
+
+    /**
+    * Get markers of this cluster.
+    *
+    * @return {Array of GMarker}
+    */
+    this.getMarkers = function () {
+        return markers_;
+    };
+
+    /**
+    * If this cluster intersects certain bounds.
+    *
+    * @param {GLatLngBounds} bounds A bounds to test
+    * @return {Boolean} Is this cluster intersects the bounds
+    */
+    this.isInBounds = function (bounds) {
+        if (center_ === null) {
+            return false;
+        }
+
+        if (!bounds) {
+            bounds = map_.getBounds();
+        }
+        var sw = map_.fromLatLngToDivPixel(bounds.getSouthWest());
+        var ne = map_.fromLatLngToDivPixel(bounds.getNorthEast());
+
+        var centerxy = map_.fromLatLngToDivPixel(center_);
+        var inViewport = true;
+        var gridSize = markerClusterer.getGridSize_();
+        if (zoom_ !== map_.getZoom()) {
+            var dl = map_.getZoom() - zoom_;
+            gridSize = Math.pow(2, dl) * gridSize;
+        }
+        if (ne.x !== sw.x && (centerxy.x + gridSize < sw.x || centerxy.x - gridSize > ne.x)) {
+            inViewport = false;
+        }
+        if (inViewport && (centerxy.y + gridSize < ne.y || centerxy.y - gridSize > sw.y)) {
+            inViewport = false;
+        }
+        return inViewport;
+    };
+
+    /**
+    * Get cluster center.
+    *
+    * @return {GLatLng}
+    */
+    this.getCenter = function () {
+        return center_;
+    };
+
+    /**
+    * Add a marker.
+    *
+    * @param {Object} marker An object of marker you want to add:
+    *   {Boolean} isAdded If the marker is added on map.
+    *   {GMarker} marker The marker you want to add.
+    */
+    this.addMarker = function (marker) {
+        if (center_ === null) {
+            /*var pos = marker['marker'].getLatLng();
+            pos = map.fromLatLngToContainerPixel(pos);
+            pos.x = parseInt(pos.x - pos.x % (GRIDWIDTH * 2) + GRIDWIDTH);
+            pos.y = parseInt(pos.y - pos.y % (GRIDWIDTH * 2) + GRIDWIDTH);
+            center = map.fromContainerPixelToLatLng(pos);*/
+            center_ = marker.marker.getLatLng();
+        }
+        markers_.push(marker);
+    };
+
+    /**
+    * Remove a marker from cluster.
+    *
+    * @param {GMarker} marker The marker you want to remove.
+    * @return {Boolean} Whether find the marker to be removed.
+    */
+    this.removeMarker = function (marker) {
+        for (var i = 0; i < markers_.length; ++i) {
+            if (marker === markers_[i].marker) {
+                if (markers_[i].isAdded) {
+                    map_.removeOverlay(markers_[i].marker);
+                }
+                markers_.splice(i, 1);
+                return true;
+            }
+        }
+        return false;
+    };
+
+    /**
+    * Get current zoom level of this cluster.
+    * Note: the cluster zoom level and map zoom level not always the same.
+    *
+    * @return {Number}
+    */
+    this.getCurrentZoom = function () {
+        return zoom_;
+    };
+
+    /**
+    * Redraw a cluster.
+    * @private
+    * @param {Boolean} isForce If redraw by force, no matter if the cluster is
+    *     in viewport.
+    */
+    this.redraw_ = function (isForce) {
+        if (!isForce && !this.isInBounds()) {
+            return;
+        }
+
+        // Set cluster zoom level.
+        zoom_ = map_.getZoom();
+        var i = 0;
+        var mz = markerClusterer.getMaxZoom_();
+        if (mz === null) {
+            mz = map_.getCurrentMapType().getMaximumResolution();
+        }
+        if (zoom_ >= mz || this.getTotalMarkers() === 1) {
+
+            // If current zoom level is beyond the max zoom level or the cluster
+            // have only one marker, the marker(s) in cluster will be showed on map.
+            for (i = 0; i < markers_.length; ++i) {
+                if (markers_[i].isAdded) {
+                    if (markers_[i].marker.isHidden()) {
+                        markers_[i].marker.show();
+                    }
+                } else {
+                    map_.addOverlay(markers_[i].marker);
+                    markers_[i].isAdded = true;
+                }
+            }
+            if (clusterMarker_ !== null) {
+                clusterMarker_.hide();
+            }
+        } else {
+            // Else add a cluster marker on map to show the number of markers in
+            // this cluster.
+            for (i = 0; i < markers_.length; ++i) {
+                if (markers_[i].isAdded && (!markers_[i].marker.isHidden())) {
+                    markers_[i].marker.hide();
+                }
+            }
+            if (clusterMarker_ === null) {
+                clusterMarker_ = new ClusterMarker_(center_, this.getTotalMarkers(), markerClusterer_.getStyles_(), markerClusterer_.getGridSize_());
+                map_.addOverlay(clusterMarker_);
+            } else {
+                if (clusterMarker_.isHidden()) {
+                    clusterMarker_.show();
+                }
+                clusterMarker_.redraw(true);
+            }
+        }
+    };
+
+    /**
+    * Remove all the markers from this cluster.
+    */
+    this.clearMarkers = function () {
+        if (clusterMarker_ !== null) {
+            map_.removeOverlay(clusterMarker_);
+        }
+        for (var i = 0; i < markers_.length; ++i) {
+            if (markers_[i].isAdded) {
+                map_.removeOverlay(markers_[i].marker);
+            }
+        }
+        markers_ = [];
+    };
+
+    /**
+    * Get number of markers.
+    * @return {Number}
+    */
+    this.getTotalMarkers = function () {
+        return markers_.length;
+    };
+}
+
+/**
+* ClusterMarker_ creates a marker that shows the number of markers that
+* a cluster contains.
+*
+* @constructor
+* @private
+* @param {GLatLng} latlng Marker's lat and lng.
+* @param {Number} count Number to show.
+* @param {Array of Object} styles The image list to be showed:
+*   {String} url Image url.
+*   {Number} height Image height.
+*   {Number} width Image width.
+*   {Array of Number} anchor Text anchor of image left and top.
+*   {String} textColor text color.
+* @param {Number} padding Padding of marker center.
+*/
+function ClusterMarker_(latlng, count, styles, padding) {
+    var index = 0;
+    var dv = count;
+    while (dv !== 0) {
+        dv = parseInt(dv / 10, 10);
+        index++;
+    }
+
+    if (styles.length < index) {
+        index = styles.length;
+    }
+    this.url_ = styles[index - 1].url;
+    this.height_ = styles[index - 1].height;
+    this.width_ = styles[index - 1].width;
+    this.textColor_ = styles[index - 1].opt_textColor;
+    this.anchor_ = styles[index - 1].opt_anchor;
+    this.latlng_ = latlng;
+    this.index_ = index;
+    this.styles_ = styles;
+    this.text_ = count;
+    this.padding_ = padding;
+}
+
+ClusterMarker_.prototype = new GOverlay();
+
+/**
+* Initialize cluster marker.
+* @private
+*/
+ClusterMarker_.prototype.initialize = function (map) {
+    this.map_ = map;
+    var div = document.createElement("div");
+    var latlng = this.latlng_;
+    var pos = map.fromLatLngToDivPixel(latlng);
+    pos.x -= parseInt(this.width_ / 2, 10);
+    pos.y -= parseInt(this.height_ / 2, 10);
+    var mstyle = "";
+    if (document.all) {
+        mstyle = 'filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src="' + this.url_ + '");';
+    } else {
+        mstyle = "background:url(" + this.url_ + ");";
+    }
+    if (typeof this.anchor_ === "object") {
+        if (typeof this.anchor_[0] === "number" && this.anchor_[0] > 0 && this.anchor_[0] < this.height_) {
+            mstyle += 'height:' + (this.height_ - this.anchor_[0]) + 'px;padding-top:' + this.anchor_[0] + 'px;';
+        } else {
+            mstyle += 'height:' + this.height_ + 'px;line-height:' + this.height_ + 'px;';
+        }
+        if (typeof this.anchor_[1] === "number" && this.anchor_[1] > 0 && this.anchor_[1] < this.width_) {
+            mstyle += 'width:' + (this.width_ - this.anchor_[1]) + 'px;padding-left:' + this.anchor_[1] + 'px;';
+        } else {
+            mstyle += 'width:' + this.width_ + 'px;text-align:center;';
+        }
+    } else {
+        mstyle += 'height:' + this.height_ + 'px;line-height:' + this.height_ + 'px;';
+        mstyle += 'width:' + this.width_ + 'px;text-align:center;';
+    }
+    var txtColor = this.textColor_ ? this.textColor_ : 'black';
+
+    div.style.cssText = mstyle + 'cursor:pointer;top:' + pos.y + "px;left:" +
+      pos.x + "px;color:" + txtColor + ";position:absolute;font-size:11px;" +
+      'font-family:Arial,sans-serif;font-weight:bold';
+    div.innerHTML = this.text_;
+    map.getPane(G_MAP_MAP_PANE).appendChild(div);
+    var padding = this.padding_;
+    GEvent.addDomListener(div, "click", function () {
+        var pos = map.fromLatLngToDivPixel(latlng);
+        var sw = new GPoint(pos.x - padding, pos.y + padding);
+        sw = map.fromDivPixelToLatLng(sw);
+        var ne = new GPoint(pos.x + padding, pos.y - padding);
+        ne = map.fromDivPixelToLatLng(ne);
+        var zoom = map.getBoundsZoomLevel(new GLatLngBounds(sw, ne), map.getSize());
+        map.setCenter(latlng, zoom);
+    });
+    this.div_ = div;
+};
+
+/**
+* Remove this overlay.
+* @private
+*/
+ClusterMarker_.prototype.remove = function () {
+    this.div_.parentNode.removeChild(this.div_);
+};
+
+/**
+* Copy this overlay.
+* @private
+*/
+ClusterMarker_.prototype.copy = function () {
+    return new ClusterMarker_(this.latlng_, this.index_, this.text_, this.styles_, this.padding_);
+};
+
+/**
+* Redraw this overlay.
+* @private
+*/
+ClusterMarker_.prototype.redraw = function (force) {
+    if (!force) {
+        return;
+    }
+    var pos = this.map_.fromLatLngToDivPixel(this.latlng_);
+    pos.x -= parseInt(this.width_ / 2, 10);
+    pos.y -= parseInt(this.height_ / 2, 10);
+    this.div_.style.top = pos.y + "px";
+    this.div_.style.left = pos.x + "px";
+};
+
+/**
+* Hide this cluster marker.
+*/
+ClusterMarker_.prototype.hide = function () {
+    this.div_.style.display = "none";
+};
+
+/**
+* Show this cluster marker.
+*/
+ClusterMarker_.prototype.show = function () {
+    this.div_.style.display = "";
+};
+
+/**
+* Get whether the cluster marker is hidden.
+* @return {Boolean}
+*/
+ClusterMarker_.prototype.isHidden = function () {
+    return this.div_.style.display === "none";
+};
\ No newline at end of file
Index: Artem.GoogleMap/Scripts/markerclusterer_packed.js
===================================================================
--- Artem.GoogleMap/Scripts/markerclusterer_packed.js	(revision 0)
+++ Artem.GoogleMap/Scripts/markerclusterer_packed.js	(revision 0)
@@ -0,0 +1 @@
+ï»¿eval(function (p, a, c, k, e, r) { e = function (c) { return (c < a ? '' : e(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36)) }; if (!''.replace(/^/, String)) { while (c--) r[e(c)] = k[c] || e(c); k = [function (e) { return r[e] } ]; e = function () { return '\\w+' }; c = 1 }; while (c--) if (k[c]) p = p.replace(new RegExp('\\b' + e(c) + '\\b', 'g'), k[c]); return p } ('7 37(n,v,w){4 o=[];4 m=n;4 t=z;4 q=3;4 r=20;4 x=[36,30,2R,2E,2z];4 s=[];4 u=[];4 p=z;4 i=0;A(i=1;i<=5;++i){s.O({\'18\':"1V://35-31-2Z.2W.2Q/2K/2C/2B/2y/m"+i+".2u",\'S\':x[i-1],\'Z\':x[i-1]})}6(F w==="X"&&w!==z){6(F w.1f==="13"&&w.1f>0){r=w.1f}6(F w.1y==="13"){t=w.1y}6(F w.14==="X"&&w.14!==z&&w.14.9!==0){s=w.14}}7 1t(){6(u.9===0){8}4 a=[];A(i=0;i<u.9;++i){q.Q(u[i],G,z,z,G)}u=a}3.1s=7(){8 s};3.12=7(){A(4 i=0;i<o.9;++i){6(F o[i]!=="1Y"&&o[i]!==z){o[i].12()}}o=[];u=[];17.1W(p)};7 1p(a){8 m.1b().34(a.1o())}7 1S(a){4 c=a.9;4 b=[];A(4 i=c-1;i>=0;--i){q.Q(a[i].C,G,a[i].I,b,G)}1t()}3.Q=7(g,j,b,h,a){6(a!==G){6(!1p(g)){u.O(g);8}}4 f=b;4 d=h;4 e=m.M(g.1o());6(F f!=="2A"){f=T}6(F d!=="X"||d===z){d=o}4 k=d.9;4 c=z;A(4 i=k-1;i>=0;i--){c=d[i];4 l=c.1L();6(l===z){1I}l=m.M(l);6(e.x>=l.x-r&&e.x<=l.x+r&&e.y>=l.y-r&&e.y<=l.y+r){c.Q({\'I\':f,\'C\':g});6(!j){c.L()}8}}c=R 1J(3,n);c.Q({\'I\':f,\'C\':g});6(!j){c.L()}d.O(c);6(d!==o){o.O(c)}};3.1C=7(a){A(4 i=0;i<o.9;++i){6(o[i].1K(a)){o[i].L();8}}};3.L=7(){4 a=3.1j();A(4 i=0;i<a.9;++i){a[i].L(G)}};3.1j=7(){4 b=[];4 a=m.1b();A(4 i=0;i<o.9;i++){6(o[i].1n(a)){b.O(o[i])}}8 b};3.1N=7(){8 t};3.1M=7(){8 m};3.1e=7(){8 r};3.Y=7(){4 a=0;A(4 i=0;i<o.9;++i){a+=o[i].Y()}8 a};3.29=7(){8 o.9};3.1A=7(){4 d=3.1j();4 e=[];4 f=0;A(4 i=0;i<d.9;++i){4 c=d[i];4 b=c.1x();6(b===z){1I}4 a=m.W();6(a!==b){4 h=c.1w();A(4 j=0;j<h.9;++j){4 g={\'I\':T,\'C\':h[j].C};e.O(g)}c.12();f++;A(j=0;j<o.9;++j){6(c===o[j]){o.1v(j,1)}}}}1S(e);3.L()};3.1u=7(a){A(4 i=0;i<a.9;++i){3.Q(a[i],G)}3.L()};6(F v==="X"&&v!==z){3.1u(v)}p=17.27(m,"26",7(){q.1A()})}7 1J(h){4 o=z;4 n=[];4 m=h;4 j=h.1M();4 l=z;4 k=j.W();3.1w=7(){8 n};3.1n=7(c){6(o===z){8 T}6(!c){c=j.1b()}4 g=j.M(c.25());4 a=j.M(c.24());4 b=j.M(o);4 e=G;4 f=h.1e();6(k!==j.W()){4 d=j.W()-k;f=23.22(2,d)*f}6(a.x!==g.x&&(b.x+f<g.x||b.x-f>a.x)){e=T}6(e&&(b.y+f<a.y||b.y-f>g.y)){e=T}8 e};3.1L=7(){8 o};3.Q=7(a){6(o===z){o=a.C.1o()}n.O(a)};3.1C=7(a){A(4 i=0;i<n.9;++i){6(a===n[i].C){6(n[i].I){j.1c(n[i].C)}n.1v(i,1);8 G}}8 T};3.1x=7(){8 k};3.L=7(b){6(!b&&!3.1n()){8}k=j.W();4 i=0;4 a=h.1N();6(a===z){a=j.21().1Z()}6(k>=a||3.Y()===1){A(i=0;i<n.9;++i){6(n[i].I){6(n[i].C.11()){n[i].C.1a()}}N{j.1r(n[i].C);n[i].I=G}}6(l!==z){l.1k()}}N{A(i=0;i<n.9;++i){6(n[i].I&&(!n[i].C.11())){n[i].C.1k()}}6(l===z){l=R E(o,3.Y(),m.1s(),m.1e());j.1r(l)}N{6(l.11()){l.1a()}l.1q(G)}}};3.12=7(){6(l!==z){j.1c(l)}A(4 i=0;i<n.9;++i){6(n[i].I){j.1c(n[i].C)}}n=[]};3.Y=7(){8 n.9}}7 E(a,c,d,b){4 f=0;4 e=c;1X(e!==0){e=V(e/10,10);f++}6(d.9<f){f=d.9}3.16=d[f-1].18;3.H=d[f-1].S;3.P=d[f-1].Z;3.19=d[f-1].1U;3.D=d[f-1].32;3.15=a;3.1T=f;3.1R=d;3.1m=c;3.1l=b}E.J=R 2Y();E.J.2X=7(i){3.1P=i;4 j=1O.2V("2U");4 h=3.15;4 f=i.M(h);f.x-=V(3.P/2,10);f.y-=V(3.H/2,10);4 g="";6(1O.2T){g=\'2S:2P:2O.2M.2L(2J=2I,2H="\'+3.16+\'");\'}N{g="2G:18("+3.16+");"}6(F 3.D==="X"){6(F 3.D[0]==="13"&&3.D[0]>0&&3.D[0]<3.H){g+=\'S:\'+(3.H-3.D[0])+\'B;1H-1g:\'+3.D[0]+\'B;\'}N{g+=\'S:\'+3.H+\'B;1G-S:\'+3.H+\'B;\'}6(F 3.D[1]==="13"&&3.D[1]>0&&3.D[1]<3.P){g+=\'Z:\'+(3.P-3.D[1])+\'B;1H-1i:\'+3.D[1]+\'B;\'}N{g+=\'Z:\'+3.P+\'B;1F-1E:1D;\'}}N{g+=\'S:\'+3.H+\'B;1G-S:\'+3.H+\'B;\';g+=\'Z:\'+3.P+\'B;1F-1E:1D;\'}4 k=3.19?3.19:\'2x\';j.U.2w=g+\'2v:2t;1g:\'+f.y+"B;1i:"+f.x+"B;2D:"+k+";2s:2F;1h-2r:2q;"+\'1h-2p:2o,2n-2m;1h-2N:2l\';j.2k=3.1m;i.2j(2i).2h(j);4 e=3.1l;17.2g(j,"2f",7(){4 a=i.M(h);4 d=R 1Q(a.x-e,a.y+e);d=i.1B(d);4 b=R 1Q(a.x+e,a.y-e);b=i.1B(b);4 c=i.2e(R 2d(d,b),i.2c());i.2b(h,c)});3.K=j};E.J.1K=7(){3.K.2a.33(3.K)};E.J.28=7(){8 R E(3.15,3.1T,3.1m,3.1R,3.1l)};E.J.1q=7(a){6(!a){8}4 b=3.1P.M(3.15);b.x-=V(3.P/2,10);b.y-=V(3.H/2,10);3.K.U.1g=b.y+"B";3.K.U.1i=b.x+"B"};E.J.1k=7(){3.K.U.1d="1z"};E.J.1a=7(){3.K.U.1d=""};E.J.11=7(){8 3.K.U.1d==="1z"};', 62, 194, '|||this|var||if|function|return|length||||||||||||||||||||||||||null|for|px|marker|anchor_|ClusterMarker_|typeof|true|height_|isAdded|prototype|div_|redraw_|fromLatLngToDivPixel|else|push|width_|addMarker|new|height|false|style|parseInt|getZoom|object|getTotalMarkers|width||isHidden|clearMarkers|number|styles|latlng_|url_|GEvent|url|textColor_|show|getBounds|removeOverlay|display|getGridSize_|gridSize|top|font|left|getClustersInViewport_|hide|padding_|text_|isInBounds|getLatLng|isMarkerInViewport_|redraw|addOverlay|getStyles_|addLeftMarkers_|addMarkers|splice|getMarkers|getCurrentZoom|maxZoom|none|resetViewport|fromDivPixelToLatLng|removeMarker|center|align|text|line|padding|continue|Cluster|remove|getCenter|getMap_|getMaxZoom_|document|map_|GPoint|styles_|reAddMarkers_|index_|opt_textColor|http|removeListener|while|undefined|getMaximumResolution|60|getCurrentMapType|pow|Math|getNorthEast|getSouthWest|moveend|addListener|copy|getTotalClusters|parentNode|setCenter|getSize|GLatLngBounds|getBoundsZoomLevel|click|addDomListener|appendChild|G_MAP_MAP_PANE|getPane|innerHTML|bold|serif|sans|Arial|family|11px|size|position|pointer|png|cursor|cssText|black|images|90|boolean|markerclusterer|trunk|color|78|absolute|background|src|scale|sizingMethod|svn|AlphaImageLoader|Microsoft|weight|DXImageTransform|progid|com|66|filter|all|div|createElement|googlecode|initialize|GOverlay|library|56|utility|opt_anchor|removeChild|containsLatLng|gmaps|53|MarkerClusterer'.split('|'), 0, {}))
\ No newline at end of file
Index: Artem.GoogleMap/UI/GoogleMap.cs
===================================================================
--- Artem.GoogleMap/UI/GoogleMap.cs	(revision 67130)
+++ Artem.GoogleMap/UI/GoogleMap.cs	(working copy)
@@ -214,6 +214,16 @@
         public bool EnableMarkerManager { get; set; }
 
         /// <summary>
+        /// Gets or sets a value indicating whether [enable marker clusterer].
+        /// </summary>
+        /// <value><c>true</c> if [enable marker clusterer]; otherwise, <c>false</c>.</value>
+        [Category("Behavior")]
+        public bool EnableMarkerClusterer { get; set; }
+
+        [Category("Google")]
+        public string KmlUrl { get; set; }
+
+        /// <summary>
         /// Gets or sets a value indicating whether [enable pinch to zoom].
         /// </summary>
         /// <value><c>true</c> if [enable pinch to zoom]; otherwise, <c>false</c>.</value>
Index: Artem.GoogleMap/UI/GoogleMap.Render.cs
===================================================================
--- Artem.GoogleMap/UI/GoogleMap.Render.cs	(revision 67130)
+++ Artem.GoogleMap/UI/GoogleMap.Render.cs	(working copy)
@@ -170,9 +170,11 @@
 #if DEBUG
             yield return new ScriptReference("Artem.Google.Scripts.ArtemGoogle.js", assembly);
             yield return new ScriptReference("Artem.Google.Scripts.markermanager.js", assembly);
+            yield return new ScriptReference("Artem.Google.Scripts.markerclusterer.js", assembly);
 #else
             yield return new ScriptReference("Artem.Google.Scripts.ArtemGoogle.min.js", assembly);
             yield return new ScriptReference("Artem.Google.Scripts.markermanager_packed.js", assembly);
+            yield return new ScriptReference("Artem.Google.Scripts.markerclusterer_packed.js", assembly);
 #endif
         }
         #endregion
@@ -199,11 +201,18 @@
                 csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.ArtemGoogle.js");
                 if (this.EnableMarkerManager)
                     csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.markermanager.js");
+
+                if (this.EnableMarkerClusterer)
+                    csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.markerclusterer.js");
 #else
                 csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.MicrosoftAjax.js");
                 csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.ArtemGoogle.min.js");
                 if (this.EnableMarkerManager)
                     csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.markermanager_packed.js");
+
+                if (this.EnableMarkerClusterer)
+                    csm.RegisterClientScriptResource(type, "Artem.Google.Scripts.markerclusterer_packed.js");
+
 #endif
             }
         }
Index: Artem.GoogleMap/UI/GoogleMap.State.cs
===================================================================
--- Artem.GoogleMap/UI/GoogleMap.State.cs	(revision 67130)
+++ Artem.GoogleMap/UI/GoogleMap.State.cs	(working copy)
@@ -127,9 +127,11 @@
             public bool EnableGoogleBar { get; set; }
             public bool EnableInfoWindow { get; set; }
             public bool EnableMarkerManager { get; set; }
+            public bool EnableMarkerClusterer { get; set; }
             public bool EnablePinchToZoom { get; set; }
             public bool EnableReverseGeocoding { get; set; }
             public bool EnableScrollWheelZoom { get; set; }
+            public string KmlUrl { get; set; }
             public string EnterpriseKey { get; set; }
             public double Height { get; set; }
             public bool IsStreetView { get; set; }
@@ -187,6 +189,7 @@
                 this.EnableGoogleBar = map.EnableGoogleBar;
                 this.EnableInfoWindow = map.EnableInfoWindow;
                 this.EnableMarkerManager = map.EnableMarkerManager;
+                this.EnableMarkerClusterer = map.EnableMarkerClusterer;
                 this.EnablePinchToZoom = map.EnablePinchToZoom;
                 this.EnableReverseGeocoding = map.EnableReverseGeocoding;
                 this.EnableScrollWheelZoom = map.EnableScrollWheelZoom;
@@ -211,6 +214,7 @@
                 this.Width = map.Width.Value;
                 this.Zoom = map.Zoom;
                 this.ZoomPanType = map.ZoomPanType;
+                this.KmlUrl = map.KmlUrl;
             }
 
             public void Save(GoogleMap map) {
@@ -226,6 +230,7 @@
                 map.EnableGoogleBar = this.EnableGoogleBar;
                 map.EnableInfoWindow = this.EnableInfoWindow;
                 map.EnableMarkerManager = this.EnableMarkerManager;
+                map.EnableMarkerClusterer = this.EnableMarkerClusterer; 
                 map.EnablePinchToZoom = this.EnablePinchToZoom;
                 map.EnableReverseGeocoding = this.EnableReverseGeocoding;
                 map.EnableScrollWheelZoom = this.EnableScrollWheelZoom;
@@ -250,6 +255,7 @@
                 map.Width = new Unit(this.Width, UnitType.Pixel);
                 map.Zoom = this.Zoom;
                 map.ZoomPanType = this.ZoomPanType;
+                map.KmlUrl = this.KmlUrl;
             }
             #endregion
         }
Index: SampleWebSite/controls/SideMenu.ascx
===================================================================
--- SampleWebSite/controls/SideMenu.ascx	(revision 67130)
+++ SampleWebSite/controls/SideMenu.ascx	(working copy)
@@ -16,6 +16,7 @@
         <li><a href="/map/ZoomPanType.aspx">&raquo; ZoomPanType</a></li>
         <li><a href="/map/StreetView.aspx">&raquo; StreetView</a></li>
         <li><a href="/map/PostbackPersistence.aspx">&raquo; Postback Persistence</a></li>
+        <li><a href="/examples/KmlUrl.aspx">&raquo; KmlUrl</a></li>
     </ul>
 </div>
 <div class="sidebar_box">
@@ -29,6 +30,7 @@
         <li><a href="/marker/InfoContent.aspx">&raquo; InfoContent</a></li>
         <li><a href="/marker/MarkerStyle.aspx">&raquo; MarkerStyle</a></li>
         <li><a href="/marker/MarkerManager.aspx">&raquo; MarkerManager</a></li>
+        <li><a href="/marker/MarkerClusterer.aspx">&raquo; MarkerClusterer</a></li>
     </ul>
 </div>
 <div class="sidebar_box">
Index: SampleWebSite/examples/KmlUrl.aspx
===================================================================
--- SampleWebSite/examples/KmlUrl.aspx	(revision 0)
+++ SampleWebSite/examples/KmlUrl.aspx	(revision 0)
@@ -0,0 +1,27 @@
+ï»¿<%@ Page Title="" Language="C#" MasterPageFile="~/GoogleMap.master" AutoEventWireup="true" CodeFile="KmlUrl.aspx.cs" Inherits="examples_KmlUrl" %>
+
+<asp:Content ID="Content1" ContentPlaceHolderID="phHead" Runat="Server">
+    <title>KmlUrl</title>
+    <meta name="description" content="GoogleMap Control - KmlUrl sample." />
+    <meta name="keywords" content="asp.net artem googlemap control kmlurl" />
+</asp:Content>
+<asp:Content ID="Content2" ContentPlaceHolderID="phContent" Runat="Server">
+    <h1>
+        Marker Manager</h1>
+<%--    <artem:GoogleMap ID="GoogleMap1" runat="server" Latitude="41.875696" Longitude="-87.624207"
+        EnableScrollWheelZoom="true" KmlUrl="http://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml" Zoom="11">
+    </artem:GoogleMap>
+--%>
+    <artem:GoogleMap ID="GoogleMap1" runat="server" Latitude="41.875696" Longitude="-87.624207"
+        EnableScrollWheelZoom="true" KmlUrl="http://kmlscribe.googlepages.com/SamplesInMaps.kml" Zoom="11">
+    </artem:GoogleMap>
+</asp:Content>
+<asp:Content ID="Content3" ContentPlaceHolderID="phDescription" Runat="Server">
+</asp:Content>
+<asp:Content ID="Content4" ContentPlaceHolderID="phProperties" Runat="Server">
+</asp:Content>
+<asp:Content ID="Content5" ContentPlaceHolderID="phActions" Runat="Server">
+</asp:Content>
+<asp:Content ID="Content6" ContentPlaceHolderID="phIssues" Runat="Server">
+</asp:Content>
+
Index: SampleWebSite/examples/KmlUrl.aspx.cs
===================================================================
--- SampleWebSite/examples/KmlUrl.aspx.cs	(revision 0)
+++ SampleWebSite/examples/KmlUrl.aspx.cs	(revision 0)
@@ -0,0 +1,14 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Web;
+using System.Web.UI;
+using System.Web.UI.WebControls;
+
+public partial class examples_KmlUrl : System.Web.UI.Page
+{
+    protected void Page_Load(object sender, EventArgs e)
+    {
+
+    }
+}
\ No newline at end of file
Index: SampleWebSite/marker/MarkerClusterer.aspx
===================================================================
--- SampleWebSite/marker/MarkerClusterer.aspx	(revision 0)
+++ SampleWebSite/marker/MarkerClusterer.aspx	(revision 0)
@@ -0,0 +1,27 @@
+ï»¿<%@ Page Title="" Language="C#" MasterPageFile="~/GoogleMap.master" AutoEventWireup="true" CodeFile="MarkerClusterer.aspx.cs" Inherits="marker_MarkerClusterer" %>
+
+<asp:Content ID="Content1" ContentPlaceHolderID="phHead" runat="Server">
+    <title>GoogleMarker - MarkerClusterer</title>
+    <meta name="description" content="GoogleMap Control - MarkerClusterer sample." />
+    <meta name="keywords" content="asp.net artem googlemap control marker clusterer" />
+</asp:Content>
+<asp:Content ID="Content2" ContentPlaceHolderID="phContent" runat="Server">
+    <h1>
+        Marker Clusterer</h1>
+    <artem:GoogleMap ID="map" runat="server" Latitude="-33.433438" Longitude="-70.56704"
+        EnableScrollWheelZoom="true" EnableMarkerClusterer="true"  Zoom="12">
+        <Markers>
+            <artem:GoogleMarker Latitude="-33.433438" Longitude="-70.56704"></artem:GoogleMarker>
+            <artem:GoogleMarker Latitude="-33.432919" Longitude="-70.56971"></artem:GoogleMarker>
+            <artem:GoogleMarker Latitude="-33.432713" Longitude="-70.57491"></artem:GoogleMarker>
+            <artem:GoogleMarker Latitude="-33.427717" Longitude="-70.56991"></artem:GoogleMarker>
+            <artem:GoogleMarker Latitude="-33.426597" Longitude="-70.56363"></artem:GoogleMarker>
+        </Markers>
+    </artem:GoogleMap>
+</asp:Content>
+<asp:Content ID="Content3" ContentPlaceHolderID="phDescription" runat="Server">
+    <p>
+        Este ejemplo utiliza la librerÃ­a Marker Clusterer.
+    </p>
+</asp:Content>
+
Index: SampleWebSite/marker/MarkerClusterer.aspx.cs
===================================================================
--- SampleWebSite/marker/MarkerClusterer.aspx.cs	(revision 0)
+++ SampleWebSite/marker/MarkerClusterer.aspx.cs	(revision 0)
@@ -0,0 +1,14 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Web;
+using System.Web.UI;
+using System.Web.UI.WebControls;
+
+public partial class marker_MarkerClusterer : System.Web.UI.Page
+{
+    protected void Page_Load(object sender, EventArgs e)
+    {
+
+    }
+}
\ No newline at end of file
